heat_template_version: 2016-10-14


description: >
  HOT template to create a new neutron network plus a router to the public
  network, and for deploying three servers into the new network. The template also
  assigns floating IP addresses to each server so they are routable from the
  public network. This creates the basic borg.trek infrastructure with a 
  manager (Ubuntu), a monitor (Ubuntu) and a DNS server (Windows Server)

parameters:
  key_name:
    type: string
    description: Name of keypair to assign to servers
  image_linux:
    type: string
    description: Name of image to use for servers
    default: Ubuntu Server 18.04 LTS (Bionic Beaver) amd64
  flavor_manager:
    type: string
    description: Flavor to use for servers
    default: m1.medium
  public_net:
    type: string
    description: >
      ID or name of public network for which floating IP addresses will be allocated
  test_admin_net_name:
    type: string
    description: Name of admin network to be created
    default: pled_test_admin_net
  test_admin_net_cidr:
    type: string
    description: Admin network address (CIDR notation)
    default: 192.168.180.0/24
  test_admin_net_gateway:
    type: string
    description: Admin network gateway address
    default: 192.168.180.1
  test_admin_net_pool_start:
    type: string
    description: Start of admin network IP address allocation pool
    default: 192.168.180.100
  test_admin_net_pool_end:
    type: string
    description: End of admin network IP address allocation pool
    default: 192.168.180.199
  sec_group_linux:
    type: comma_delimited_list
    description: Security groups

resources:
  test_admin_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: test_admin_net_name }

  test_admin_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: test_admin_net }
      cidr: { get_param: test_admin_net_cidr }
      gateway_ip: { get_param: test_admin_net_gateway }
      allocation_pools:
        - start: { get_param: test_admin_net_pool_start }
          end: { get_param: test_admin_net_pool_end }

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net }

  router_interface_admin:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: test_admin_subnet }

  manager:
    type: OS::Nova::Server
    properties:
      name: manager-test
      image: { get_param: image_linux }
      flavor: { get_param: flavor_manager }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: manager_port }
      user_data: { get_file: lib/scripts/manager_boot.bash }

  manager_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: test_admin_net }
      security_groups: { get_param: sec_group_linux }
      fixed_ips:
        - subnet_id: { get_resource: test_admin_subnet }

  manager_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: manager_port }

  test_backup_vol:
    type: OS::Cinder::Volume
    properties:
      name: test_backup_vol
      size: 1

  test_df_service_vol:
    type: OS::Cinder::Volume
    properties:
      name: test_df_service_vol
      size: 1

  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: test_backup_vol }
      mountpoint: /dev/vdc
      instance_uuid: { get_resource: manager }

outputs:
  manager_admin_ip:
    value: { get_attr: [manager, networks, get_param: test_admin_net_name, 0]}
  test_admin_net:
    value: { get_resource: test_admin_net }
  test_admin_subnet:
    value: { get_resource: test_admin_subnet }