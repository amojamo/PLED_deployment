heat_template_version: 2016-10-14

description: >
  HOT template for a GNU/Linux server with a nic in the admin network
  and a nic in another network. A floating IP will be associated with
  the IP in the other network (not the admin network).

parameters:
  key_name:
    type: string
    description: Name of keypair to assign to servers
  server_name:
    type: string
    description: Name of linux server
  image:
    type: string
    description: Name of image to use for servers
    default: Ubuntu Server 18.04 LTS (Bionic Beaver) amd64
  flavor:
    type: string
    description: Flavor to use for servers
  sec_group_linux:
    type: comma_delimited_list
    description: Security groups
  public_net:
    type: string
    description: >
      ID or name of public network for which floating IP addresses will be allocated
  test_admin_net:
    type: string
    description: UUID of admin net created in base template (pled_admin_net)
  test_admin_subnet:
    type: string
    description: UUID of admin subnet created in base template (192.168.180.0/24)
  dns_ip:
    type: string
    description: IP address of dns server created in base template
  manager_ip:
    type: string
    description: IP address of server manager created in base template


conditions:
  balancer: {equals: [{get_param: server_name}, "web-api-balancer"]}   
  web_api: {equals: [{get_param: server_name}, "web-api"]}
  dbreplica: {equals: [{get_param: server_name}, "dbreplica"]}
  docker_registry: {equals: [{get_param: server_name}, "docker_registry-test"]}
  interface: {equals: [{get_param: server_name}, "database_web_interface"]}

resources:

###################### DreamFactory API ######################
  server_web:
    type: OS::Nova::Server
    condition: web_api
    properties:
      name: { get_param: server_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server_port_admin }
      user_data_format: RAW

      user_data:
        str_replace:
          template: { get_file: scripts/web_api.bash }
          params:
            manager_ip_address: { get_param: manager_ip }
            dns_ip_address: { get_param: dns_ip }

###################### Balancer server ######################
  server_balancer:
    type: OS::Nova::Server
    condition: balancer
    properties:
      name: { get_param: server_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server_port_admin }
      user_data_format: RAW

      user_data:
        str_replace:
          template: { get_file: scripts/balancer_boot.bash }
          params:
            manager_ip_address: { get_param: manager_ip }
            dns_ip_address: { get_param: dns_ip }

###################### MongoDB replica server ######################
  server_dbreplica:
    type: OS::Nova::Server
    condition: dbreplica
    properties:
      name: { get_param: server_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server_port_admin }
      user_data_format: RAW

      user_data:
        str_replace:
          template: { get_file: scripts/dbreplica_boot.bash }
          params:
            manager_ip_address: { get_param: manager_ip }
            dns_ip_address: { get_param: dns_ip }

###################### Docker Registry ######################
  server_registry:
    type: OS::Nova::Server
    condition: docker_registry
    properties:
      name: { get_param: server_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server_port_admin }
      user_data_format: RAW

      user_data:
        str_replace:
          template: { get_file: scripts/docker_registry_boot.bash }
          params:
            manager_ip_address: { get_param: manager_ip }
            dns_ip_address: { get_param: dns_ip }

###################### Database web-interface ######################
  server_interface:
    type: OS::Nova::Server
    condition: interface
    properties:
      name: { get_param: server_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server_port_admin }
      user_data_format: RAW

      user_data:
        str_replace:
          template: { get_file: scripts/interface_boot.bash }
          params:
            manager_ip_address: { get_param: manager_ip }
            dns_ip_address: { get_param: dns_ip }

  server_port_admin:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: test_admin_net }
      security_groups: { get_param: sec_group_linux }
      fixed_ips:
        - subnet_id: { get_param: test_admin_subnet }

  server_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server_port_admin }

